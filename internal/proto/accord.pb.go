// Code generated by protoc-gen-go.
// source: internal/proto/accord.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	internal/proto/accord.proto

It has these top-level messages:
	Handle
	AcquireRequest
	AcquireResponse
	RenewRequest
	RenewResponse
	DoneRequest
	DoneResponse
	ListRequest
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_OK   Status = 0
	Status_DONE Status = 1
	Status_HELD Status = 2
)

var Status_name = map[int32]string{
	0: "OK",
	1: "DONE",
	2: "HELD",
}
var Status_value = map[string]int32{
	"OK":   0,
	"DONE": 1,
	"HELD": 2,
}

func (x Status) String() string {
	return proto1.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListRequest_Filter_Status int32

const (
	ListRequest_Filter_ALL  ListRequest_Filter_Status = 0
	ListRequest_Filter_DONE ListRequest_Filter_Status = 1
)

var ListRequest_Filter_Status_name = map[int32]string{
	0: "ALL",
	1: "DONE",
}
var ListRequest_Filter_Status_value = map[string]int32{
	"ALL":  0,
	"DONE": 1,
}

func (x ListRequest_Filter_Status) String() string {
	return proto1.EnumName(ListRequest_Filter_Status_name, int32(x))
}
func (ListRequest_Filter_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{7, 0, 0}
}

// Handle
type Handle struct {
	// Handle ID
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Resource name/identifier, unique within namespace.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Custom namespace.
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	// Expiration UNIX timestamp (millisecond precision)
	ExpTime int64 `protobuf:"varint,4,opt,name=exp_time,json=expTime" json:"exp_time,omitempty"`
	// Done at UNIX timestamp (millisecond precision)
	DoneTime int64 `protobuf:"varint,5,opt,name=done_time,json=doneTime" json:"done_time,omitempty"`
	// Describes the number of times this handle has been acquired.
	NumAcquired uint32 `protobuf:"varint,6,opt,name=num_acquired,json=numAcquired" json:"num_acquired,omitempty"`
	// Metadata.
	Metadata map[string]string `protobuf:"bytes,8,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Handle) Reset()                    { *m = Handle{} }
func (m *Handle) String() string            { return proto1.CompactTextString(m) }
func (*Handle) ProtoMessage()               {}
func (*Handle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Handle) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Handle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Handle) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Handle) GetExpTime() int64 {
	if m != nil {
		return m.ExpTime
	}
	return 0
}

func (m *Handle) GetDoneTime() int64 {
	if m != nil {
		return m.DoneTime
	}
	return 0
}

func (m *Handle) GetNumAcquired() uint32 {
	if m != nil {
		return m.NumAcquired
	}
	return 0
}

func (m *Handle) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AcquireRequest struct {
	// Owner identifier
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// Resource name/identifier.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Custom namespace.
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	// TTL the maximum life-span of the acquired resource (in seconds).
	Ttl uint32 `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	// Custom, optional metadata.
	Metadata map[string]string `protobuf:"bytes,5,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AcquireRequest) Reset()                    { *m = AcquireRequest{} }
func (m *AcquireRequest) String() string            { return proto1.CompactTextString(m) }
func (*AcquireRequest) ProtoMessage()               {}
func (*AcquireRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AcquireRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AcquireRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AcquireRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *AcquireRequest) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *AcquireRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type AcquireResponse struct {
	Status Status  `protobuf:"varint,1,opt,name=status,enum=blacksquaremedia.accord.Status" json:"status,omitempty"`
	Handle *Handle `protobuf:"bytes,2,opt,name=handle" json:"handle,omitempty"`
}

func (m *AcquireResponse) Reset()                    { *m = AcquireResponse{} }
func (m *AcquireResponse) String() string            { return proto1.CompactTextString(m) }
func (*AcquireResponse) ProtoMessage()               {}
func (*AcquireResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AcquireResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_OK
}

func (m *AcquireResponse) GetHandle() *Handle {
	if m != nil {
		return m.Handle
	}
	return nil
}

type RenewRequest struct {
	// Owner identifier.
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// Handle identifier.
	HandleId []byte `protobuf:"bytes,2,opt,name=handle_id,json=handleId,proto3" json:"handle_id,omitempty"`
	// TTL the maximum life-span of the acquired resource (in seconds).
	Ttl uint32 `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
	// Optional metadata.
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RenewRequest) Reset()                    { *m = RenewRequest{} }
func (m *RenewRequest) String() string            { return proto1.CompactTextString(m) }
func (*RenewRequest) ProtoMessage()               {}
func (*RenewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RenewRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *RenewRequest) GetHandleId() []byte {
	if m != nil {
		return m.HandleId
	}
	return nil
}

func (m *RenewRequest) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RenewRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type RenewResponse struct {
}

func (m *RenewResponse) Reset()                    { *m = RenewResponse{} }
func (m *RenewResponse) String() string            { return proto1.CompactTextString(m) }
func (*RenewResponse) ProtoMessage()               {}
func (*RenewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type DoneRequest struct {
	// Owner identifier.
	Owner string `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	// Handle identifier.
	HandleId []byte `protobuf:"bytes,2,opt,name=handle_id,json=handleId,proto3" json:"handle_id,omitempty"`
	// Optional metadata.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DoneRequest) Reset()                    { *m = DoneRequest{} }
func (m *DoneRequest) String() string            { return proto1.CompactTextString(m) }
func (*DoneRequest) ProtoMessage()               {}
func (*DoneRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DoneRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DoneRequest) GetHandleId() []byte {
	if m != nil {
		return m.HandleId
	}
	return nil
}

func (m *DoneRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type DoneResponse struct {
}

func (m *DoneResponse) Reset()                    { *m = DoneResponse{} }
func (m *DoneResponse) String() string            { return proto1.CompactTextString(m) }
func (*DoneResponse) ProtoMessage()               {}
func (*DoneResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ListRequest struct {
	// Filter object
	Filter *ListRequest_Filter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListRequest) GetFilter() *ListRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type ListRequest_Filter struct {
	// Namespace prefix.
	Prefix string `protobuf:"bytes,1,opt,name=prefix" json:"prefix,omitempty"`
	// Only certain status.
	Status ListRequest_Filter_Status `protobuf:"varint,2,opt,name=status,enum=blacksquaremedia.accord.ListRequest_Filter_Status" json:"status,omitempty"`
}

func (m *ListRequest_Filter) Reset()                    { *m = ListRequest_Filter{} }
func (m *ListRequest_Filter) String() string            { return proto1.CompactTextString(m) }
func (*ListRequest_Filter) ProtoMessage()               {}
func (*ListRequest_Filter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

func (m *ListRequest_Filter) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *ListRequest_Filter) GetStatus() ListRequest_Filter_Status {
	if m != nil {
		return m.Status
	}
	return ListRequest_Filter_ALL
}

func init() {
	proto1.RegisterType((*Handle)(nil), "blacksquaremedia.accord.Handle")
	proto1.RegisterType((*AcquireRequest)(nil), "blacksquaremedia.accord.AcquireRequest")
	proto1.RegisterType((*AcquireResponse)(nil), "blacksquaremedia.accord.AcquireResponse")
	proto1.RegisterType((*RenewRequest)(nil), "blacksquaremedia.accord.RenewRequest")
	proto1.RegisterType((*RenewResponse)(nil), "blacksquaremedia.accord.RenewResponse")
	proto1.RegisterType((*DoneRequest)(nil), "blacksquaremedia.accord.DoneRequest")
	proto1.RegisterType((*DoneResponse)(nil), "blacksquaremedia.accord.DoneResponse")
	proto1.RegisterType((*ListRequest)(nil), "blacksquaremedia.accord.ListRequest")
	proto1.RegisterType((*ListRequest_Filter)(nil), "blacksquaremedia.accord.ListRequest.Filter")
	proto1.RegisterEnum("blacksquaremedia.accord.Status", Status_name, Status_value)
	proto1.RegisterEnum("blacksquaremedia.accord.ListRequest_Filter_Status", ListRequest_Filter_Status_name, ListRequest_Filter_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for V1 service

type V1Client interface {
	// Acquire requests resource handle.
	Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error)
	// Renew renews resource handle.
	Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error)
	// Done marks an handle as completed.
	Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error)
	// List streams handles that are done.
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (V1_ListClient, error)
}

type v1Client struct {
	cc *grpc.ClientConn
}

func NewV1Client(cc *grpc.ClientConn) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error) {
	out := new(AcquireResponse)
	err := grpc.Invoke(ctx, "/blacksquaremedia.accord.V1/Acquire", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) Renew(ctx context.Context, in *RenewRequest, opts ...grpc.CallOption) (*RenewResponse, error) {
	out := new(RenewResponse)
	err := grpc.Invoke(ctx, "/blacksquaremedia.accord.V1/Renew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) Done(ctx context.Context, in *DoneRequest, opts ...grpc.CallOption) (*DoneResponse, error) {
	out := new(DoneResponse)
	err := grpc.Invoke(ctx, "/blacksquaremedia.accord.V1/Done", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (V1_ListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_V1_serviceDesc.Streams[0], c.cc, "/blacksquaremedia.accord.V1/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1ListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_ListClient interface {
	Recv() (*Handle, error)
	grpc.ClientStream
}

type v1ListClient struct {
	grpc.ClientStream
}

func (x *v1ListClient) Recv() (*Handle, error) {
	m := new(Handle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for V1 service

type V1Server interface {
	// Acquire requests resource handle.
	Acquire(context.Context, *AcquireRequest) (*AcquireResponse, error)
	// Renew renews resource handle.
	Renew(context.Context, *RenewRequest) (*RenewResponse, error)
	// Done marks an handle as completed.
	Done(context.Context, *DoneRequest) (*DoneResponse, error)
	// List streams handles that are done.
	List(*ListRequest, V1_ListServer) error
}

func RegisterV1Server(s *grpc.Server, srv V1Server) {
	s.RegisterService(&_V1_serviceDesc, srv)
}

func _V1_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blacksquaremedia.accord.V1/Acquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).Acquire(ctx, req.(*AcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blacksquaremedia.accord.V1/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).Renew(ctx, req.(*RenewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_Done_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).Done(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blacksquaremedia.accord.V1/Done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).Done(ctx, req.(*DoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).List(m, &v1ListServer{stream})
}

type V1_ListServer interface {
	Send(*Handle) error
	grpc.ServerStream
}

type v1ListServer struct {
	grpc.ServerStream
}

func (x *v1ListServer) Send(m *Handle) error {
	return x.ServerStream.SendMsg(m)
}

var _V1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blacksquaremedia.accord.V1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acquire",
			Handler:    _V1_Acquire_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _V1_Renew_Handler,
		},
		{
			MethodName: "Done",
			Handler:    _V1_Done_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _V1_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/accord.proto",
}

func init() { proto1.RegisterFile("internal/proto/accord.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 631 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x55, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xfe, 0x39, 0x69, 0xb3, 0xf6, 0xf4, 0xcf, 0x2a, 0xeb, 0x27, 0x28, 0x2d, 0x12, 0xa5, 0xda,
	0x20, 0x02, 0x91, 0x41, 0x26, 0x04, 0x82, 0xab, 0x89, 0x0d, 0x6d, 0x50, 0x56, 0xe1, 0xa1, 0x5d,
	0x21, 0x4d, 0x5e, 0xe3, 0x89, 0x68, 0x89, 0x93, 0x25, 0x0e, 0xdb, 0xae, 0xb9, 0xe2, 0x61, 0x78,
	0x14, 0x5e, 0x01, 0xc1, 0x6b, 0x70, 0x85, 0x62, 0x7b, 0x5d, 0x86, 0x94, 0x75, 0x80, 0x7a, 0x55,
	0xfb, 0xfc, 0xfb, 0xce, 0xf7, 0x9d, 0xe3, 0x06, 0xfa, 0x3e, 0x17, 0x2c, 0xe1, 0x34, 0x58, 0x89,
	0x93, 0x48, 0x44, 0x2b, 0x74, 0x32, 0x89, 0x12, 0xcf, 0x91, 0x17, 0x7c, 0x7d, 0x3f, 0xa0, 0x93,
	0xc3, 0xf4, 0x28, 0xa3, 0x09, 0x0b, 0x99, 0xe7, 0x53, 0x47, 0xb9, 0x87, 0x5f, 0x0c, 0xb0, 0x36,
	0x29, 0xf7, 0x02, 0x86, 0xdb, 0x60, 0xf8, 0x5e, 0x17, 0x0d, 0x90, 0xdd, 0x24, 0x86, 0xef, 0x61,
	0x0c, 0x15, 0x4e, 0x43, 0xd6, 0x35, 0x06, 0xc8, 0xae, 0x13, 0x79, 0xc6, 0x37, 0xa1, 0x9e, 0xff,
	0xa6, 0x31, 0x9d, 0xb0, 0xae, 0x29, 0x1d, 0xe7, 0x06, 0x7c, 0x03, 0x6a, 0xec, 0x24, 0xde, 0x13,
	0x7e, 0xc8, 0xba, 0x95, 0x01, 0xb2, 0x4d, 0xb2, 0xc0, 0x4e, 0xe2, 0x77, 0x7e, 0xc8, 0x70, 0x1f,
	0xea, 0x5e, 0xc4, 0x99, 0xf2, 0x55, 0xa5, 0xaf, 0x96, 0x1b, 0xa4, 0xf3, 0x36, 0x34, 0x79, 0x16,
	0xee, 0xd1, 0xc9, 0x51, 0xe6, 0x27, 0xcc, 0xeb, 0x5a, 0x03, 0x64, 0xb7, 0x48, 0x83, 0x67, 0xe1,
	0x9a, 0x36, 0xe1, 0x2d, 0xa8, 0x85, 0x4c, 0x50, 0x8f, 0x0a, 0xda, 0xad, 0x0d, 0x4c, 0xbb, 0xe1,
	0x3e, 0x70, 0x4a, 0x38, 0x39, 0x8a, 0x8f, 0xf3, 0x46, 0xc7, 0x6f, 0x70, 0x91, 0x9c, 0x92, 0x69,
	0x7a, 0xef, 0x39, 0xb4, 0x2e, 0xb8, 0x70, 0x07, 0xcc, 0x43, 0x76, 0x2a, 0x99, 0xd7, 0x49, 0x7e,
	0xc4, 0xff, 0x43, 0xf5, 0x23, 0x0d, 0xb2, 0x33, 0xee, 0xea, 0xf2, 0xcc, 0x78, 0x8a, 0x86, 0x3f,
	0x11, 0xb4, 0x75, 0x53, 0x84, 0x1d, 0x65, 0x2c, 0x15, 0x79, 0x70, 0x74, 0xcc, 0x59, 0xa2, 0x0b,
	0xa8, 0xcb, 0x5f, 0xa8, 0xd7, 0x01, 0x53, 0x88, 0x40, 0x0a, 0xd7, 0x22, 0xf9, 0x11, 0xbf, 0x2d,
	0x90, 0xae, 0x4a, 0xd2, 0x8f, 0x4b, 0x49, 0x5f, 0x6c, 0x6a, 0x3e, 0xe4, 0x3f, 0x21, 0x58, 0x9c,
	0xe2, 0xa4, 0x71, 0xc4, 0x53, 0x86, 0x9f, 0x80, 0x95, 0x0a, 0x2a, 0xb2, 0x54, 0x96, 0x68, 0xbb,
	0xb7, 0x4a, 0x3b, 0xdc, 0x91, 0x61, 0x44, 0x87, 0xe7, 0x89, 0x1f, 0xe4, 0xa0, 0x24, 0x4e, 0xe3,
	0x92, 0x44, 0x35, 0x4f, 0xa2, 0xc3, 0x87, 0x3f, 0x10, 0x34, 0x09, 0xe3, 0xec, 0xf8, 0xf2, 0x01,
	0xf4, 0xa1, 0xae, 0x12, 0xf6, 0x7c, 0x4f, 0x42, 0x34, 0x49, 0x4d, 0x19, 0xb6, 0xbc, 0x33, 0xad,
	0xcd, 0x73, 0xad, 0xc7, 0x05, 0xad, 0x2b, 0x52, 0xeb, 0xd5, 0xd2, 0x86, 0x8a, 0xe8, 0xf3, 0x51,
	0x7a, 0x11, 0x5a, 0x1a, 0x44, 0xc9, 0x3c, 0xfc, 0x8a, 0xa0, 0xb1, 0x1e, 0x71, 0xf6, 0x0f, 0x9c,
	0xb7, 0x0b, 0x0c, 0x4d, 0xc9, 0xd0, 0x2d, 0x65, 0x58, 0x80, 0x9a, 0x0f, 0xc1, 0x36, 0x34, 0x15,
	0x86, 0xe6, 0xf7, 0x0d, 0x41, 0x63, 0xe4, 0xa7, 0xe2, 0x8c, 0xdf, 0x0b, 0xb0, 0x0e, 0xfc, 0x40,
	0x68, 0x82, 0x0d, 0xf7, 0x7e, 0x69, 0xab, 0x85, 0x2c, 0xe7, 0xa5, 0x4c, 0x21, 0x3a, 0xb5, 0xf7,
	0x19, 0x81, 0xa5, 0x4c, 0xf8, 0x1a, 0x58, 0x71, 0xc2, 0x0e, 0xfc, 0x13, 0xdd, 0x9e, 0xbe, 0xe1,
	0x57, 0xd3, 0xf5, 0x35, 0xe4, 0xfa, 0xba, 0x7f, 0x80, 0xf3, 0xdb, 0x46, 0x0f, 0xfb, 0x60, 0x29,
	0x0b, 0x5e, 0x00, 0x73, 0x6d, 0x34, 0xea, 0xfc, 0x87, 0x6b, 0x50, 0x59, 0x1f, 0x6f, 0x6f, 0x74,
	0xd0, 0xbd, 0xa5, 0xa9, 0xd3, 0x02, 0x63, 0xfc, 0xba, 0xe8, 0xcb, 0x4f, 0x9b, 0x1b, 0xa3, 0xf5,
	0x8e, 0xe1, 0x7e, 0x37, 0xc0, 0xd8, 0x7d, 0x84, 0xdf, 0xc3, 0x82, 0x7e, 0x67, 0xf8, 0xee, 0x15,
	0x5f, 0x7c, 0xcf, 0x9e, 0x1d, 0xa8, 0x9f, 0xec, 0x2e, 0x54, 0xe5, 0x72, 0xe1, 0xe5, 0x2b, 0x6d,
	0x78, 0xef, 0xce, 0xac, 0x30, 0x5d, 0x77, 0x07, 0x2a, 0xf9, 0x4c, 0xf1, 0xd2, 0x55, 0xd6, 0xaa,
	0xb7, 0x3c, 0x23, 0x4a, 0x17, 0x1d, 0x43, 0x25, 0x57, 0xfe, 0x92, 0xa2, 0x85, 0xc1, 0xf4, 0x66,
	0xfd, 0x89, 0x3c, 0x44, 0xfb, 0x96, 0xfc, 0x22, 0xae, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x87,
	0xb7, 0x6a, 0xc4, 0x30, 0x07, 0x00, 0x00,
}
